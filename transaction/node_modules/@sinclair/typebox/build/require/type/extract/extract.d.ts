import type { TSchema, SchemaOptions } from '@sinclair/typebox/build/require/type/schema';
import type { AssertRest, AssertType, UnionToTuple } from '@sinclair/typebox/build/require/type/helpers';
import type { TMappedResult } from '@sinclair/typebox/build/require/type/mapped';
import { type TUnion } from '@sinclair/typebox/build/require/type/union';
import { type Static } from '@sinclair/typebox/build/require/type/static';
import { type TNever } from '@sinclair/typebox/build/require/type/never';
import { type TUnionEvaluated } from '@sinclair/typebox/build/require/type/union';
import { type TTemplateLiteral } from '@sinclair/typebox/build/require/type/template-literal';
import { type TExtractFromMappedResult } from '@sinclair/typebox/build/require/type/extract/extract-from-mapped-result';
import { type TExtractFromTemplateLiteral } from '@sinclair/typebox/build/require/type/extract/extract-from-template-literal';
type TExtractRest<L extends TSchema[], R extends TSchema> = AssertRest<UnionToTuple<{
    [K in keyof L]: Static<AssertType<L[K]>> extends Static<R> ? L[K] : never;
}[number]>> extends infer R extends TSchema[] ? TUnionEvaluated<R> : never;
export type TExtract<L extends TSchema, U extends TSchema> = (L extends TUnion<infer S> ? TExtractRest<S, U> : L extends U ? L : TNever);
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
export declare function Extract<L extends TMappedResult, R extends TSchema>(type: L, union: R, options?: SchemaOptions): TExtractFromMappedResult<L, R>;
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
export declare function Extract<L extends TTemplateLiteral, R extends TSchema>(type: L, union: R, options?: SchemaOptions): TExtractFromTemplateLiteral<L, R>;
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
export declare function Extract<L extends TSchema, R extends TSchema>(type: L, union: R, options?: SchemaOptions): TExtract<L, R>;
export {};
